name: Chatbot Prediction Service

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Lint code
        run: echo "Linting repository"

      - name: Run unit tests
        run: echo "Running unit tests"

  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Build and push Rasa server image
      - name: Build Rasa Run Server Image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          docker build -t  $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f chatbot/chatbot.dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      # Build and push Rasa Actions server image
      - name: Build Rasa Actions Server Image
        id: build-actions-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ACTIONS_REPOSITORY: ${{ secrets.ACTIONS_ECR_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ACTIONS_REPOSITORY:$IMAGE_TAG -f chatbot/actions.dockerfile .
          docker push $ECR_REGISTRY/$ACTIONS_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ACTIONS_REPOSITORY:$IMAGE_TAG"

      # # Build and push Registro Ventas image
      # - name: Build Registro Ventas Image
      #   id: build-registro-ventas-image
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     REGISTRO_VENTAS_REPOSITORY: ${{ secrets.REGISTRO_VENTAS_ECR_REPOSITORY }}
      #     IMAGE_TAG: latest
      #   run: |
      #     docker build -t $ECR_REGISTRY/$REGISTRO_VENTAS_REPOSITORY:$IMAGE_TAG -f registro_ventas/registro_ventas.dockerfile .
      #     docker push $ECR_REGISTRY/$REGISTRO_VENTAS_REPOSITORY:$IMAGE_TAG
      #     echo "::set-output name=image::$ECR_REGISTRY/$REGISTRO_VENTAS_REPOSITORY:$IMAGE_TAG"


  continuous-deployment:
    name: Continuous Deployment
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    env:
      TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
      TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN }}
      TWILIO_NUMBER: ${{ secrets.TWILIO_NUMBER }}
      TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
      CHAT_ID: ${{ secrets.CHAT_ID }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      PASSWORD: ${{ secrets.PASSWORD }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Pull the latest images
      - name: Pull latest Rasa Server image
        run: |
          docker pull ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest

      - name: Pull latest Rasa Actions Server image
        run: |
          docker pull ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ACTIONS_ECR_REPOSITORY }}:latest

      # - name: Pull latest Registro Ventas image
      #   run: |
      #     docker pull ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.REGISTRO_VENTAS_ECR_REPOSITORY }}:latest

      # Run Docker containers
      - name: Run Rasa Server Container
        run: |
          docker run -d -p 5005:5005 --name=rasa-run-server --network rasa-network -e PASSWORD="${{ secrets.PASSWORD }}" -e TELEGRAM_TOKEN="${{ secrets.TELEGRAM_TOKEN }}" -e CHAT_ID="${{ secrets.CHAT_ID }}" -e TWILIO_ACCOUNT_SID="${{ secrets.TWILIO_ACCOUNT_SID }}" -e TWILIO_AUTH_TOKEN="${{ secrets.TWILIO_AUTH_TOKEN }}" -e TWILIO_NUMBER="${{ secrets.TWILIO_NUMBER }}" -e  'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' -e 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' -e 'AWS_REGION=${{ secrets.AWS_REGION }}'  ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest

      - name: Run Rasa Actions Server Container
        run: |
          docker run -d -p 5055:5055 --name=rasa-run-action-server --network rasa-network -e 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' -e 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' -e 'AWS_REGION=${{ secrets.AWS_REGION }}'  ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ACTIONS_ECR_REPOSITORY }}:latest


      # - name: Registro Ventas Containes
      #   run: |
      #     docker run -d -p 5056:5056 --name=registro-ventas --network rasa-network -e SECRET_KEY="${{ secrets.SECRET_KEY }}" -e 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' -e 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' -e 'AWS_REGION=${{ secrets.AWS_REGION }}'  ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.REGISTRO_VENTAS_ECR_REPOSITORY }}:latest

      - name: Clean previous images and containers
        run: |
          docker system prune -f